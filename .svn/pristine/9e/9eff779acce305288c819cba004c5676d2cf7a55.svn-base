from dhanhq import marketfeed
import csv
import os
import asyncio
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

async def on_connect(instance):
    logging.debug("Connected to websocket")

async def on_message(instance, message):
    logging.debug(f"ENTERED IN THE on_message live_websocket ")
    try:
        if 'type' in message:
            if message['type'] == 'Ticker Data':
                # Check if the file exists, if not, write the header row
                if not os.path.exists('D:/shashikant kamthe/Main code/svn/repo_Trading/Strategy_Builder/Python_StrategyBuilder_v1/live_web_socket/dhan_LTP.csv'):
                    with open('D:/shashikant kamthe/Main code/svn/repo_Trading/Strategy_Builder/Python_StrategyBuilder_v1/live_web_socket/dhan_LTP.csv', 'w', newline='') as csvfile:
                        writer = csv.writer(csvfile)
                        writer.writerow(['Type', 'Exchange Segment', 'Security ID', 'LTP', 'LTT'])
                
                # Read the existing data
                existing_data = {}
                if os.path.exists('D:/shashikant kamthe/Main code/svn/repo_Trading/Strategy_Builder/Python_StrategyBuilder_v1/live_web_socket/dhan_LTP.csv'):
                    with open('D:/shashikant kamthe/Main code/svn/repo_Trading/Strategy_Builder/Python_StrategyBuilder_v1/live_web_socket/dhan_LTP.csv', 'r', newline='') as csvfile:
                        reader = csv.DictReader(csvfile)
                        for row in reader:
                            existing_data[row['Security ID']] = row

                # Update the data for the current security ID
                existing_data[message.get('security_id', '')] = {
                    'Type': message.get('type', ''),
                    'Exchange Segment': message.get('exchange_segment', ''),
                    'Security ID': message.get('security_id', ''),
                    'LTP': message.get('LTP', ''),
                    'LTT': message.get('LTT', '')
                }

                # Write the data back to the CSV file
                with open('D:/shashikant kamthe/Main code/svn/repo_Trading/Strategy_Builder/Python_StrategyBuilder_v1/live_web_socket/dhan_LTP.csv', 'w', newline='') as csvfile:
                    fieldnames = ['Type', 'Exchange Segment', 'Security ID', 'LTP', 'LTT']
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    for row in existing_data.values():
                        writer.writerow(row)

    except Exception as e:
        logging.debug("Error processing message:", e)
        logging.debug("Message causing the issue:", message)





async def live_websocket(instruments):
    connected = False
    # logging.debug("Formatted instruments:", formatted_instruments)
    while not connected:
        try:
            # Convert instruments to the desired format
            formatted_instruments = [(item['exchangeId'], item['securityId']) for item in instruments]
            logging.debug("~~~~~~~~in live_websocket")
            
            client_id = "1101343871"
            access_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJkaGFuIiwicGFydG5lcklkIjoiIiwiZXhwIjoxNzI4ODAxODg5LCJ0b2tlbkNvbnN1bWVyVHlwZSI6IlNFTEYiLCJ3ZWJob29rVXJsIjoiIiwiZGhhbkNsaWVudElkIjoiMTEwMTM0Mzg3MSJ9.Rcr4VMpNakJvYB0ThB84v0DOaxiMRIZZoeqol8QAGEEgvPJJ3SpBsZVIyAcJvscOO3HPkx1fI0r6uZwV99V08g'  # Replace with your actual access token
            
            # logging.debug(f'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~', )
            # logging.debug(f'Processing instruments for ltp:::::::::::::::::::: %s', formatted_instruments)
            # logging.debug(f'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~', )

            # Type of data subscription
            subscription_code = marketfeed.Ticker

            print("Subscription code :", subscription_code)

            feed = marketfeed.DhanFeed(
                client_id,
                access_token,
                formatted_instruments,
                subscription_code,
                on_connect=on_connect,
                on_message=on_message
            )

            await feed.connect()  # Await the connect coroutine
            await feed.run_forever()  # Await the run_forever coroutine

            connected = True  # Set connected to True if connection successful
        except Exception as e:
            logging.debug("Error connecting to websocket:", e)
            await asyncio.sleep(2)  # Retry after 2 seconds if connection failsss