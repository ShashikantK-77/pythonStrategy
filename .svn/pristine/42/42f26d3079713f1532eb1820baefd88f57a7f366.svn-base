from dhanhq import dhanhq
from Helper_Files.strategy_combiner import update_strategy_status
from Helper_Files.save_executed_order import save_executed_order
from Helper_Files.Risk_management import place_stop_loss_order,place_book_profit_order
from dhanhq import dhanhq
from Helper_Files.strategy_combiner import update_strategy_status,increment_operation_count
from Helper_Files.save_executed_order import save_executed_order
from Helper_Files.Risk_management import place_stop_loss_order, place_book_profit_order
from Helper_Files.send_error_log import send_error_log
import logging


# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
# Initialize DhanHQ client
client_id = "1101343871"
access_token = 'eyVHlwZSI6IlNFTEYiLCJ3ZWJob27UX6WJGaznYV7lRXaf-txSVPqxAqqLvMUJGliA6FfNAM0Fgdi7Dws3Q'



dhan = dhanhq(client_id, access_token)

# Define the mapping for action_name to transaction_type
TRANSACTION_TYPE_MAP = {
    'buy': dhan.BUY,
    'sell': dhan.SELL,
}

# Define the mapping for exchange to exchange_segment
EXCHANGE_SEGMENT_MAP = {
    'NSE': dhan.NSE,
    'BSE': dhan.BSE,
    # Add more exchanges as needed
}
from Helper_Files.get_latest_ltp import get_latest_ltp


# def place_order(actions, strategy_id, strategy_data, security_id):

#     logging.debug(f"Placing strategy_data order by shashikant...: {strategy_data}")
#     logging.debug(f"Placing order in actions...: {actions}")
    
#     logging.debug(f"Placing security_id order buy...: {security_id}")
#     latest_ltp = get_latest_ltp(security_id)
#     try:
#         for action in actions:
           
#             logging.debug(f"Performing action:",action['action_name'])

#             security_id = security_id  # Use the provided security_id
#             # Set other order details dynamically if needed
#             quantity = action.get('quantity', 1)  # Default to 1 if not provided
#             product_type = dhan.INTRA  # Assuming INTRA; update if necessary
#             price = action.get('price', 0)  # Default to 0 if not provided
#             order_type = dhan.MARKET if action['action_type'] == 'market' else dhan.LIMIT
#              # Dynamically set transaction_type based on action_name
#             transaction_type = TRANSACTION_TYPE_MAP.get(action['action_name'].lower(), dhan.BUY)  # Default to BUY if not found
            
#             # Dynamically set exchange_segment based on action exchange
#             exchange_segment = EXCHANGE_SEGMENT_MAP.get(strategy_data['strategy']['exchange'], dhan.NSE)  # Default to NSE if not found
#             # Assuming logging is configured elsewhere in your code
#             logging.debug(f"Placing order with the following details: "
#               f"Security ID: {security_id}, "
#               f"Quantity: {quantity}, "
#               f"Product Type: {product_type}, "
#               f"Price: {price}, "
#               f"Order Type: {order_type}, "
#               f"Transaction Type: {transaction_type}, "
#               f"Exchange Segment: {exchange_segment}")
         
            
#             try:
#                 if action['action_type'] == 'Bracket':
#                     print("in order type Bracket BracketTarget, BracketStopLoss:")
#                     response = dhan.place_order(
#                         transaction_type=transaction_type,
#                         exchange_segment=exchange_segment,
#                         product_type=product_type,
#                         order_type=dhan.BO,
#                         validity='DAY',
#                         security_id=security_id,
#                         quantity=quantity,
#                         price=price,
#                         bo_profit_value=action.get('BracketTarget', 0),  # Adjust if necessary
#                         bo_stop_loss_Value=action.get('BracketStopLoss', 0)  # Adjust if necessary
#                     )
#                 elif action['action_type'] == 'limit':
#                     print("in limit type limit BracketTarget, BracketStopLoss:", action.get('BracketTarget', 0), action.get('BracketStopLoss', 0))
#                     response = dhan.place_order(
#                         transaction_type=transaction_type,
#                         exchange_segment=exchange_segment,
#                         product_type=product_type,
#                         order_type=dhan.LIMIT,
#                         validity='DAY',
#                         security_id=security_id,
#                         quantity=quantity,
#                         price=action.get('price', 0),
#                     )
#                 elif action['action_type'] == 'cover':
#                     print("in cover type cover BracketTarget, BracketStopLoss:", action.get('BracketTarget', 0), action.get('BracketStopLoss', 0))
#                     response = dhan.place_order(
#                         transaction_type=transaction_type,
#                         exchange_segment=exchange_segment,
#                         product_type=product_type,
#                         order_type=dhan.COVER,
#                         validity='DAY',
#                         security_id=security_id,
#                         quantity=quantity,
#                         price=price,
#                         bo_profit_value=action.get('BracketTarget', 0),
#                         bo_stop_loss_Value=action.get('BracketStopLoss', 0)
#                     )
#                 elif action['action_type'] == 'trigger':
#                     print("in trigger type trigger BracketTarget, BracketStopLoss:", action.get('BracketTarget', 0), action.get('BracketStopLoss', 0))
#                     response = dhan.place_order(
#                         transaction_type=transaction_type,
#                         exchange_segment=exchange_segment,
#                         product_type=product_type,
#                         order_type=dhan.TRIGGER,
#                         validity='DAY',
#                         security_id=security_id,
#                         quantity=quantity,
#                         price=action.get('price', 0),
#                     )
#                 elif action['action_type'] == 'market':
#                     print("in market type market ")
#                     response = dhan.place_order(
#                         # security_id=security_id,   # hdfcbank
#                         # exchange_segment=dhan.NSE,
#                         # transaction_type=dhan.BUY,
#                         # quantity=1,
#                         # order_type=dhan.MARKET,
#                         # product_type=dhan.INTRA,
#                         # price=0,

#                     security_id=security_id,
#                     exchange_segment=exchange_segment,
#                     transaction_type=transaction_type,
#                     quantity=quantity,
#                     order_type=order_type,
#                     product_type=dhan.INTRA,
#                     price=price,
#                     )

#                 if response['status'] == 'success' and 'data' in response:
#                     order_data = response['data']
#                     if order_data.get('orderStatus') == 'TRANSIT' and 'orderId' in order_data:
#                         order_id = order_data['orderId']
#                         order_details = dhan.get_order_by_id(order_id)
#                         save_executed_order(order_details, strategy_id, latest_ltp, ordertype="Entry")
#                         place_book_profit_order(order_details, strategy_id,latest_ltp, strategy_data,actions)
#                         place_stop_loss_order(order_details, strategy_id,latest_ltp, strategy_data,actions)
#                         update_strategy_status(strategy_id)
#                         increment_operation_count(strategy_id)
#                     else:
#                         error_message = f"Failed to place order for {action['action_name']}. Response: {response}"
                  
#                         logging.debug( {error_message})
#                         send_error_log(error_message, 'place_order')
#                 else:
#                     error_message = f"Failed to place order for {action['action_name']}. Response: {response}"
#                     print(error_message)
#                     logging.debug(f"Failed to place order for {action['action_name']}. Response: {response}")
#                     send_error_log(error_message, 'place_order')

#             except Exception as e:
#                 error_message = f"Failed to place order for {action['action_name']}: {e}"
#                 logging.debug(f"Failed to place order for {error_message}.")
#                 send_error_log(error_message, 'place_order')

#     except Exception as e:
#         error_message = f"Failed to iterate over actions for order placement: {e}"
#         print(error_message)
#         logging.debug(f"{error_message}")
#         send_error_log(error_message, 'place_order')






def place_order(action, strategy_id, strategy_data, security_id):
    logging.debug(f"Placing single order for strategy_data by Shashikant...: {strategy_data}")
    logging.debug(f"Placing single order action...: {action}")
    
    logging.debug(f"Placing security_id order buy...: {security_id}")
    latest_ltp = get_latest_ltp(security_id)
    
    try:
        logging.debug(f"Performing action: {action['action_name']}")

        # Use the provided security_id
        quantity = action.get('quantity', 1)  # Default to 1 if not provided
        product_type = dhan.INTRA  # Assuming INTRA; update if necessary
        price = action.get('price', 0)  # Default to 0 if not provided
        order_type = dhan.MARKET if action['action_type'] == 'market' else dhan.LIMIT
        
        # Set transaction_type dynamically based on action_name
        transaction_type = TRANSACTION_TYPE_MAP.get(action['action_name'].lower(), dhan.BUY)
        
        # Set exchange_segment dynamically based on strategy data
        exchange_segment = EXCHANGE_SEGMENT_MAP.get(strategy_data['strategy']['exchange'], dhan.NSE)
        
        logging.debug(f"Placing order with the following details: "
                      f"Security ID: {security_id}, "
                      f"Quantity: {quantity}, "
                      f"Product Type: {product_type}, "
                      f"Price: {price}, "
                      f"Order Type: {order_type}, "
                      f"Transaction Type: {transaction_type}, "
                      f"Exchange Segment: {exchange_segment}")
        
        # Handle different action types
        if action['action_type'] == 'Bracket':
            logging.debug("Placing Bracket order...")
            response = dhan.place_order(
                transaction_type=transaction_type,
                exchange_segment=exchange_segment,
                product_type=product_type,
                order_type=dhan.BO,
                validity='DAY',
                security_id=security_id,
                quantity=quantity,
                price=price,
                bo_profit_value=action.get('BracketTarget', 0),
                bo_stop_loss_Value=action.get('BracketStopLoss', 0)
            )
        elif action['action_type'] == 'limit':
            logging.debug("Placing Limit order...")
            response = dhan.place_order(
                transaction_type=transaction_type,
                exchange_segment=exchange_segment,
                product_type=product_type,
                order_type=dhan.LIMIT,
                validity='DAY',
                security_id=security_id,
                quantity=quantity,
                price=action.get('price', 0),
            )
        elif action['action_type'] == 'cover':
            logging.debug("Placing Cover order...")
            response = dhan.place_order(
                transaction_type=transaction_type,
                exchange_segment=exchange_segment,
                product_type=product_type,
                order_type=dhan.COVER,
                validity='DAY',
                security_id=security_id,
                quantity=quantity,
                price=price,
                bo_profit_value=action.get('BracketTarget', 0),
                bo_stop_loss_Value=action.get('BracketStopLoss', 0)
            )
        elif action['action_type'] == 'trigger':
            logging.debug("Placing Trigger order...")
            response = dhan.place_order(
                transaction_type=transaction_type,
                exchange_segment=exchange_segment,
                product_type=product_type,
                order_type=dhan.TRIGGER,
                validity='DAY',
                security_id=security_id,
                quantity=quantity,
                price=action.get('price', 0),
            )
        elif action['action_type'] == 'market':
            logging.debug("Placing Market order...")
            response = dhan.place_order(
                security_id=security_id,
                exchange_segment=exchange_segment,
                transaction_type=transaction_type,
                quantity=quantity,
                order_type=order_type,
                product_type=dhan.INTRA,
                price=price,
            )

        # Handle response and save order
        if response['status'] == 'success' and 'data' in response:
            order_data = response['data']
            if order_data.get('orderStatus') == 'TRANSIT' and 'orderId' in order_data:
                order_id = order_data['orderId']
                order_details = dhan.get_order_by_id(order_id)
                save_executed_order(order_details, strategy_id, latest_ltp, ordertype="Entry")
                place_book_profit_order(order_details, strategy_id, latest_ltp, strategy_data, action)
                place_stop_loss_order(order_details, strategy_id, latest_ltp, strategy_data, action)
                update_strategy_status(strategy_id)
                increment_operation_count(strategy_id)
            else:
                error_message = f"Failed to place order for {action['action_name']}. Response: {response}"
                logging.error(error_message)
                send_error_log(error_message, 'place_single_order')
        else:
            error_message = f"Failed to place order for {action['action_name']}. Response: {response}"
            logging.error(error_message)
            send_error_log(error_message, 'place_single_order')

    except Exception as e:
        error_message = f"Failed to place order for {action['action_name']}: {e}"
        logging.error(error_message)
        send_error_log(error_message, 'place_single_order')
