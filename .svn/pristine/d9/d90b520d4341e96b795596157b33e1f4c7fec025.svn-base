# import csv

# def search_security_ids(symbols, exchanges, categories):
#     print("symbols in search_security_ids",symbols,exchanges, categories)
#     # Path to the CSV file
#     file_path = "D:/ShashikantKamthe/2024/may/18.05.24/python_sma/live_web_socket/dhan_Security_Lists.csv"
    
#     security_ids = []
    
#     # Dictionary to map exchange IDs to their names
#     exchange_map = {
#         "IDX_I": 0,
#         "NSE_EQ": 1,
#         "NSE_FNO": 2,
#         "NSE_CURRENCY": 3,
#         "BSE_EQ": 4,
#         "MCX_COMM": 5,
#         "BSE_CURRENCY": 7,
#         "BSE_FNO": 8
#     }
    
#     # Open the CSV file
#     with open(file_path, newline='') as csvfile:
#         reader = csv.DictReader(csvfile)
#         # Iterate through each row in the CSV file
#         for row in reader:
#             # Check if the trading symbol matches any of the given symbols
#             if row["SEM_TRADING_SYMBOL"] in symbols and row["SEM_INSTRUMENT_NAME"] == "EQUITY" and row["SEM_EXM_EXCH_ID"] == "NSE":
#                 # If a match is found, append the security ID and SEM_EXM_EXCH_ID to the list
#                 exchange = exchange_map.get(row["SEM_EXM_EXCH_ID"],1)
#                 security_id = row["SEM_SMST_SECURITY_ID"]
#                 security_ids.append((exchange, security_id))
#     return security_ids



# def search_security_ids(symbols):
#     print("in search_security_ids-------------", symbols)
#     file_path = "D:/ShashikantKamthe/2024/may/18.05.24/python_sma/live_web_socket/dhan_Security_Lists.csv"

#     # Dictionary to map exchange and category combinations to their respective exchange IDs
#     exchange_map = {
#         ('NSE', 'INDEX'): 0,
#         ('NSE', 'EQUITY'): 1,
#         ('NSE', 'OPTFUT'): 2,
#         ('NSE', 'OPTCUR'): 3,
#         ('BSE', 'EQUITY'): 4,
#         ('MCX', 'OPTFUT'): 5,
#         ('BSE', 'OPTCUR'): 7,
#         ('BSE', 'OPTFUT'): 8
#     }

#     security_ids = []

#     # Open the CSV file and search for each symbol, exchange, and category
#     with open(file_path, newline='') as csvfile:
#         reader = csv.DictReader(csvfile)

#         for item in symbols:
#             symbol = item['symbol']
#             exchanges = item['exchanges']
#             categories = item['categories']

#             for exchange in exchanges:
#                 for category in categories:
#                     # Check if the exchange and category combination is present in the exchange_map
#                     if (exchange, category) in exchange_map:
#                         exchange_id = exchange_map[(exchange, category)]
                        
#                         # Iterate through each row in the CSV file
#                         for row in reader:
#                             # Check if the symbol and exchange ID match the inputs
#                             if row["SEM_TRADING_SYMBOL"] == symbol and row["SEM_EXM_EXCH_ID"] == exchange:
#                                 security_id = row["SEM_SMST_SECURITY_ID"]
#                                 security_ids.append((exchange_id, security_id))
#                                 print("Found match: exchange_id =", exchange_id, ", security_id =", security_id)
#                                 break  # If we found the match, we can break out of the loop
#                         print("search_security_ids security_ids:",security_ids)

#     return security_ids


# def search_security_ids(symbols):
#     print("search_security_ids--", symbols)
#     file_path = "D:/ShashikantKamthe/2024/may/18.05.24/python_sma/live_web_socket/dhan_Security_Lists.csv"

#     # Dictionary to map exchange and category combinations to their respective exchange IDs
#     exchange_map = {
#         ('NSE', 'INDEX'): 0,
#         ('NSE', 'EQUITY'): 1,
#         ('NSE', 'OPTFUT'): 2,
#         ('NSE', 'OPTCUR'): 3,
#         ('BSE', 'EQUITY'): 4,
#         ('MCX', 'OPTFUT'): 5,
#         ('BSE', 'OPTCUR'): 7,
#         ('BSE', 'OPTFUT'): 8
#     }

#     security_ids = []

#     # Open the CSV file outside the loop
#     with open(file_path, newline='') as csvfile:
#         reader = csv.DictReader(csvfile)

#         # Iterate through each symbol
#         for item in symbols:
#             symbol = item['symbol']
#             exchanges = item['exchanges']
#             categories = item['categories']
            
#             symbol_security_ids = []  # List to store security IDs for the current symbol

#             # Iterate through each exchange and category combination
#             for exchange in exchanges:
#                 for category in categories:
#                     # Check if the exchange and category combination is present in the exchange_map
#                     if (exchange, category) in exchange_map:
#                         exchange_id = exchange_map[(exchange, category)]
                        
#                         # Reset the file pointer to the beginning of the file
#                         csvfile.seek(0)
                        
#                         # Iterate through each row in the CSV file
#                         for row in reader:
#                             # Check if the symbol and exchange ID match the inputs
#                             if row["SEM_TRADING_SYMBOL"] == symbol and row["SEM_EXM_EXCH_ID"] == exchange:
#                                 security_id = row["SEM_SMST_SECURITY_ID"]
#                                 symbol_security_ids.append((exchange_id, security_id))
#                                 print("Found match for symbol", symbol, ": exchange_id =", exchange_id, ", security_id =", security_id)
#                                 break  # If we found the match, we can break out of the loop
#                         else:
#                             # If no match was found for the current exchange and category, print a message
#                             print("No match found for symbol", symbol, ": exchange =", exchange, ", category =", category)
            
#             # Append the list of security IDs for the current symbol to the overall list
#             security_ids.extend(symbol_security_ids)
#             print("search_security_ids security_ids:::::::::::",security_ids)
#     return security_ids

# import csv

# def search_security_ids(symbols):
#     print("search_security_ids--", symbols)
#     file_path = "D:/ShashikantKamthe/2024/may/18.05.24/python_sma/live_web_socket/dhan_Security_Lists.csv"
#     output_file_path = "D:/ShashikantKamthe/2024/may/18.05.24/python_sma/Input_Files/unique_symbols_security_ids.csv"

#     # Dictionary to map exchange and category combinations to their respective exchange IDs
#     exchange_map = {
#         ('NSE', 'INDEX'): 0,
#         ('NSE', 'EQUITY'): 1,
#         ('NSE', 'OPTFUT'): 2,
#         ('NSE', 'OPTCUR'): 3,
#         ('BSE', 'EQUITY'): 4,
#         ('MCX', 'OPTFUT'): 5,
#         ('BSE', 'OPTCUR'): 7,
#         ('BSE', 'OPTFUT'): 8
#     }

#     security_ids = []

#     # Open the CSV file outside the loop
#     with open(file_path, newline='') as csvfile:
#         reader = csv.DictReader(csvfile)

#         # Iterate through each symbol
#         for item in symbols:
#             symbol = item['symbol']
#             exchanges = item['exchanges']
#             categories = item['categories']
            
#             # List to store security IDs for the current symbol
#             symbol_security_ids = []  

#             # Iterate through each exchange and category combination
#             for exchange in exchanges:
#                 for category in categories:
#                     # Check if the exchange and category combination is present in the exchange_map
#                     if (exchange, category) in exchange_map:
#                         exchange_id = exchange_map[(exchange, category)]
                        
#                         # Reset the file pointer to the beginning of the file
#                         csvfile.seek(0)
                        
#                         # Iterate through each row in the CSV file
#                         for row in reader:
#                             # Check if the symbol and exchange ID match the inputs
#                             if row["SEM_TRADING_SYMBOL"] == symbol and row["SEM_EXM_EXCH_ID"] == exchange:
#                                 security_id = row["SEM_SMST_SECURITY_ID"]
#                                 symbol_security_ids.append((symbol, exchange_id, security_id))
#                                 # symbol_security_ids.append((exchange_id, security_id))
#                                 print("Found match for symbol", symbol, ": exchange_id =", exchange_id, ", security_id =", security_id)
#                                 break  # If we found the match, we can break out of the loop
#                         else:
#                             # If no match was found for the current exchange and category, print a message
#                             print("No match found for symbol", symbol, ": exchange =", exchange, ", category =", category)
            
#             # Append the list of security IDs for the current symbol to the overall list
#             security_ids.extend(symbol_security_ids)
#             print("search_security_ids security_ids:::::::::::", security_ids)
            
#     # Write the unique symbols along with their security IDs to a new CSV file
#     try:
#         with open(output_file_path, mode='w', newline='') as csvfile:
#             writer = csv.writer(csvfile)
#             writer.writerow(['Symbol', 'Exchange ID', 'Security ID'])
#             for symbol, exchange_id, security_id in security_ids:
#                 writer.writerow([symbol, exchange_id, security_id])
#         print("Data written to", output_file_path)
#     except Exception as e:
#         print("Error occurred while writing to CSV file:", e)
#     print("returning security_ids in search_security_ids---------------------------", security_ids)
 
#     return security_ids


# import csv
# import logging
# logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# def search_security_ids(symbols):
#     logging.debug(f"in search_security_ids------------>",)
#     logging.debug(f"in search_security_ids----->", symbols)
#     logging.debug(f"in search_security_ids------------>",)
#     # search_security_ids-- [{'symbol': 'TCS', 'exchanges': ['BSE'], 'categories': ['FUTCUR']}]
#     file_path = "D:/ShashikantKamthe/2024/july/18.07.24/python_sma/live_web_socket/dhan_Security_Lists.csv"
#     output_file_path = "D:/ShashikantKamthe/2024/july/18.07.24/python_sma/Input_Files/unique_symbols_security_ids.csv"

#     # Dictionary to map exchange and category combinations to their respective exchange IDs
#     exchange_map = {
#         ('NSE', 'INDEX'): 0,
#         ('NSE', 'EQUITY'): 1,
#         ('NSE', 'OPTFUT'): 2,
#         ('NSE', 'OPTCUR'): 3,
#         ('BSE', 'EQUITY'): 4,
#         ('MCX', 'OPTFUT'): 5,
#         ('BSE', 'OPTCUR'): 7,
#         ('BSE', 'OPTFUT'): 8,
#         ('BSE', 'FUTCUR'): 4
#     }

#     security_ids = []

#     # Open the CSV file outside the loop
#     with open(file_path, newline='') as csvfile:
#         reader = csv.DictReader(csvfile)

#         # Iterate through each symbol
#         for item in symbols:
#             symbol = item['symbol']
#             exchanges = item['exchanges']
#             categories = item['categories']
            
#             # List to store security IDs for the current symbol
#             symbol_security_ids = []  

#             # Iterate through each exchange and category combination
#             for exchange in exchanges:
#                 for category in categories:
#                     # Check if the exchange and category combination is present in the exchange_map
#                     if (exchange, category) in exchange_map:
#                         exchange_id = exchange_map[(exchange, category)]
                        
#                         # Reset the file pointer to the beginning of the file
#                         csvfile.seek(0)
                        
#                         # Iterate through each row in the CSV file
#                         for row in reader:
#                             # Check if the symbol and exchange ID match the inputs
#                             if row["SEM_TRADING_SYMBOL"] == symbol and row["SEM_EXM_EXCH_ID"] == exchange:
#                                 security_id = row["SEM_SMST_SECURITY_ID"]
#                                 # Append the full symbol data to the list for writing to CSV
#                                 symbol_security_ids.append((symbol, exchange_id, security_id))
#                                 # Append only the exchange_id and security_id to the return list
#                                 security_ids.append((exchange_id, security_id))
#                                 print("Found match for symbol", symbol, ": exchange_id =", exchange_id, ", security_id =", security_id)
#                                 break  # If we found the match, we can break out of the loop
#                         else:
#                             # If no match was found for the current exchange and category, print a message
#                             print("No match found for symbol", symbol, ": exchange =", exchange, ", category =", category)
            
#             print("search_security_ids security_ids:::::::::::", security_ids)
            
#     # Write the unique symbols along with their security IDs to a new CSV file
#     try:
#         with open(output_file_path, mode='w', newline='') as csvfile:
#             writer = csv.writer(csvfile)
#             writer.writerow(['Symbol', 'Exchange ID', 'Security ID'])
#             for symbol, exchange_id, security_id in symbol_security_ids:
#                 writer.writerow([symbol, exchange_id, security_id])
#         print("Data written to", output_file_path)
#     except Exception as e:
#         print("Error occurred while writing to CSV file:", e)
#     print("returning security_ids in search_security_ids---------------------------", security_ids)
 
#     return security_ids


# import csv
# import logging
# import requests
# import json

# logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# def search_security_ids(symbols):
#     logging.debug(f"in search_security_ids------------>",)
#     logging.debug(f"in search_security_ids----->", symbols)
#     logging.debug(f"in search_security_ids------------>",)
    
#     api_url = 'http://localhost:5000/python/processSymbols'  # URL of your Node.js API
#     headers = {'Content-Type': 'application/json'}
    
#     # Convert symbols list to JSON format
#     payload = {'symbols': symbols}
    
#     # Send POST request to Node.js API
#     response = requests.post(api_url, headers=headers, data=json.dumps(payload))
#     logging.debug(f"response in search_security_ids----->", response)

#     if response.status_code == 200:
#         result = response.json()
#         security_ids = result['securityIds']
#         logging.debug(f": {security_ids}")
        
#         # Write the results to a CSV file
#         output_file_path = "D:/ShashikantKamthe/2024/july/18.07.24/python_sma/Input_Files/unique_symbols_security_ids.csv"
        
#         try:
#             with open(output_file_path, mode='w', newline='') as csvfile:
#                 writer = csv.writer(csvfile)
#                 writer.writerow(['Symbol', 'Exchange ID', 'Security ID'])
#                 for item in security_ids:
#                     writer.writerow([item['symbol'], item['exchangeId'], item['securityId']])
#             print("Data written to", output_file_path)
#         except Exception as e:
#             print("Error occurred while writing to CSV file:", e)
#     else:
#         print(f"Failed to get data from API: {response.status_code}")
#         print("Response:", response.text)



# # symbols = [
# #     {'symbol': 'TCS', 'exchanges': ['BSE'], 'categories': ['FUTCUR']}
# # ]

# # search_security_ids(symbols)




import csv
import json
import logging
import requests
from Helper_Files.send_error_log import send_error_log

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# def search_security_ids(symbols):
#     logging.debug("Starting search_security_ids")
#     logging.debug("Symbols in search_security_ids:", symbols)
    
#     api_url = 'http://localhost:5000/python/processSymbols'  # URL of your Node.js API
#     headers = {'Content-Type': 'application/json'}
    
#     # Convert symbols list to JSON format
#     payload = {'symbols': symbols}
    
#     try:
#         # Send POST request to Node.js API
#         response = requests.post(api_url, headers=headers, data=json.dumps(payload))
#         response.raise_for_status()  # Raise an exception for HTTP errors
#         logging.debug("API response:", response.json())
        
#         if response.status_code == 200:
#             result = response.json()
#             security_ids = result['securityIds']
#             # logging.debug("in search_security_ids Received security IDs:", security_ids)
            
#             # Write the results to a CSV file
#             output_file_path = "D:/ShashikantKamthe/2024/september/02.09.24/python_sma/Input_Files/unique_symbols_security_ids.csv"
            
#             try:
#                 with open(output_file_path, mode='w', newline='') as csvfile:
#                     writer = csv.writer(csvfile)
#                     writer.writerow(['Symbol', 'Exchange ID', 'Security ID'])
#                     for item in security_ids:
#                         writer.writerow([item['symbol'], item['exchangeId'], item['securityId']])
#                 print("Data written to", output_file_path)
#             except Exception as e:
#                 logging.error("Error occurred while writing to CSV file:", e)
#         else:
#             logging.error(f"Failed to get data from API: {response.status_code}")
#             logging.error("Response:", response.text)
#             send_error_log(response.text, 'search_security_ids')
#     except requests.RequestException as e:
#         logging.error("Error during API request:", e)
#         send_error_log(e, 'search_security_ids')
#     # Return the security_ids
#     logging.debug("return security_ids in search_security_ids:", security_ids)
#     return security_ids



def search_security_ids(symbols):
    logging.debug("Starting search_security_ids")
    logging.debug(f"Symbols in search_security_ids: {symbols}")
    
    api_url = 'http://localhost:5000/python/processSymbols'  # URL of your Node.js API
    headers = {'Content-Type': 'application/json'}
    
    # Convert symbols list to JSON format
    payload = {'symbols': symbols}
    
    try:
        # Send POST request to Node.js API
        response = requests.post(api_url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()  # Raise an exception for HTTP errors
        logging.debug(f"API response: {response.json()}")
        
        if response.status_code == 200:
            result = response.json()
            security_ids = result['securityIds']  # Correct extraction from the response
            logging.debug(f"Received security IDs: {security_ids}")
            
            # Write the results to a CSV file
            output_file_path = "D:/ShashikantKamthe/2024/september/02.09.24/python_sma/Input_Files/unique_symbols_security_ids.csv"
            
            try:
                with open(output_file_path, mode='w', newline='') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow(['Symbol', 'Exchange ID', 'Security ID'])
                    for item in security_ids:
                        writer.writerow([item['symbol'], item['exchangeId'], item['securityId']])
                logging.info(f"Data successfully written to {output_file_path}")
            except Exception as e:
                logging.error(f"Error occurred while writing to CSV file: {e}")
                send_error_log(str(e), 'search_security_ids')
        else:
            logging.error(f"Failed to get data from API: {response.status_code}")
            logging.error(f"Response: {response.text}")
            send_error_log(response.text, 'search_security_ids')
    except requests.RequestException as e:
        logging.error(f"Error during API request: {e}")
        send_error_log(str(e), 'search_security_ids')
    
    return security_ids
