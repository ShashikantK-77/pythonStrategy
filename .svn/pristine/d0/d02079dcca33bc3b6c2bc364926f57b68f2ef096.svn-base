import time
import threading
import logging
import asyncio
import csv
from Helper_Files.strategy_combiner import combine_data, update_strategy_status
from live_web_socket.live_websocket import live_websocket
from live_web_socket.search_security_ids import search_security_ids
from Helper_Files.calculate_sma import calculate_sma
from Helper_Files.get_latest_ltp import get_latest_ltp
from Helper_Files.place_order import place_order
from Helper_Files.fetch_historical_data import fetch_historical_data
from Helper_Files.unique_symbol import get_unique_symbols, read_csv
from Helper_Files.read_security_ids import read_security_ids
from Helper_Files.rsi import calculate_rsi

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def calculate_sma(data, period):
    logging.debug("Calculating SMA with period: %s", period)
    
    close_prices = data.get('close')
    if close_prices is None:
        logging.error("No 'close' prices in data: %s", data)
        return None

    sma = []
    if period is None:
        return None

    for i in range(len(close_prices)):
        if i < period - 1:
            sma.append(None)
        else:
            sma.append(sum(close_prices[i - period + 1:i + 1]) / period)

    return sma[-1] if sma else None

def read_security_ids(file_path):
    security_ids_map = {}
    with open(file_path, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            symbol = row['Symbol']
            exchange_id = int(row['Exchange ID'])
            security_id = int(row['Security ID'])
            security_ids_map[symbol] = (exchange_id, security_id)
    return security_ids_map

async def process_symbols(symbols):
    print('process_symbols in symbols:', symbols)
    # Directly call search_security_ids and await the result
    security_ids_list = search_security_ids(symbols)
    
    # Await the live_websocket function with the entire list of security IDs
    await live_websocket(security_ids_list)

async def websocket_engine(strategy_file, csv_symbols_event, strategy_done_event):
    logging.debug("Starting websocket engine")
    csv_symbols_event.wait()  # Wait until symbols are ready
    symbols = get_unique_symbols(strategy_file)
    print("symbols from get_unique_symbols------------------------------------", symbols)
    await process_symbols(symbols)  # Call process_symbols function only once

def strategy_engine(strategy_file, csv_symbols_event, strategy_done_event):
    logging.debug("Starting strategy engine")
    security_ids_map = read_security_ids('Input_Files/unique_symbols_security_ids.csv')
    while not strategy_done_event.is_set():  # Run in a loop until strategy_done_event is set
        strategy_data_list = combine_data(strategy_file, 'Input_Files/indicators.csv', 'Input_Files/indicator_parameters.csv', 'Input_Files/actions.csv')
        symbols = get_unique_symbols(strategy_file)
        csv_symbols_event.set()  # Notify that symbols are ready

        if not symbols:
            logging.error("No symbols found in strategy file.")
            return

        fromDate = '2023-05-01'  # Replace with your desired start date
        toDate = '2024-05-23'

        for symbol in symbols:
            exchange = symbol['exchanges'][0]  # Use the first exchange
            category = symbol['categories'][0]  # Use the first category
            security_id = security_ids_map.get(symbol['symbol'], (None, None))[1]  # Get security ID

            if security_id is None:
                logging.error("No security ID found for symbol: %s", symbol['symbol'])
                continue

            logging.debug("Fetching historical data for symbol: %s", symbol['symbol'])
            data = fetch_historical_data(symbol['symbol'], fromDate, toDate)
            latest_ltp = get_latest_ltp(security_id)
            logging.debug("Latest LTP: %s", latest_ltp)

            if data and latest_ltp is not None:
                waiting_strategy_exists = any(strategy_data['strategy']['status'] == 'waiting' for strategy_data in strategy_data_list)
                
                if not waiting_strategy_exists:
                    logging.debug("No waiting strategies found")
                    time.sleep(1)
                    continue

                strategy_executed = False

                for strategy_data in strategy_data_list:
                    if strategy_data['strategy']['status'] == 'executed':
                        logging.debug("Skipping strategy '%s' because it's already executed", strategy_data['strategy']['strategy_name'])
                        continue

                    short_term_period = None
                    long_term_period = None
                    rsi_order_flag = False  # Initialize the flag
                    for indicator in strategy_data['indicators']:
                        if indicator['indicator_name'] == 'Simple Moving Average':
                            parameters = indicator['parameters']
                            for param in parameters:
                                if param['parameter_name'] == 'short_term_period':
                                    short_term_period = int(param['parameter_value'])
                                elif param['parameter_name'] == 'long_term_period':
                                    long_term_period = int(param['parameter_value'])
                                    
                                    short_term_sma = calculate_sma(data, short_term_period)
                                    long_term_sma = calculate_sma(data, long_term_period)
                        elif indicator['indicator_name'] == 'Relative Strength Index':
                            logging.debug("--------------------------In RSI----------------------------")
                          
                            # closing_prices = data['close']
                            rsi = calculate_rsi(data)
                            # print("rsi---",rsi)
                            # Generate buy signal
                            buy_signal = None
                            if rsi.iloc[-1] > 70:
                                buy_signal = "RSI above 70, consider selling or shorting."
                                rsi_order_flag = True
                            elif rsi.iloc[-1] < 30:
                                buy_signal = "RSI below 30, consider buying soon."
                            else:
                                buy_signal = "No buy signal."
    
                            # return f"RSI for {symbol}: {rsi.iloc[-1]:.2f}. {buy_signal}"
                            print("buy_signal:-------------",buy_signal)
                            # logging.debug("RSI Signal: %s", rsi_signal)
                            pass  # Add your RSI logic here
                              
                    logging.debug("Strategy: %s", strategy_data['strategy']['strategy_name'])
                    logging.debug("Short-term SMA (%s): %s", short_term_period, short_term_sma)
                    logging.debug("Long-term SMA (%s): %s", long_term_period, long_term_sma)
                    logging.debug("LTP: %s", latest_ltp)

                    if short_term_sma is not None and long_term_sma is not None:
                        # if (short_term_sma - long_term_sma) >= 15 and latest_ltp >= short_term_sma:
                        #     logging.info("Buy Signal Generated")
                        #     place_order(strategy_data['actions'], strategy_data['strategy']['strategy_id'])
                        #     update_strategy_status(strategy_data['strategy']['strategy_id'])
                        #     strategy_data_list = combine_data(strategy_file, 'Input_Files/indicators.csv', 'Input_Files/indicator_parameters.csv', 'Input_Files/actions.csv')
                        #     strategy_executed = True
                        #     break
                        if rsi_order_flag:
                            logging.info("Placing order based on RSI condition")
                            place_order(strategy_data['actions'], strategy_data['strategy']['strategy_id'])
                            update_strategy_status(strategy_data['strategy']['strategy_id'])
                            strategy_data_list = combine_data(strategy_file, 'Input_Files/indicators.csv', 'Input_Files/indicator_parameters.csv', 'Input_Files/actions.csv')
                            logging.debug("Buy Signal Not Generated")

                if not strategy_executed:
                    time.sleep(1)

# Modify the main program to use asyncio's run function
if __name__ == "__main__":
    logging.debug("Main program started")
    csv_symbols_event = threading.Event()
    strategy_done_event = threading.Event()

    strategy_thread = threading.Thread(target=strategy_engine, args=('Input_Files/strategy.csv', csv_symbols_event, strategy_done_event))
    websocket_thread = threading.Thread(target=lambda: asyncio.run(websocket_engine('Input_Files/strategy.csv', csv_symbols_event, strategy_done_event)))  # Use lambda to call the function inside a thread

    try:
        strategy_thread.start()
        websocket_thread.start()

        strategy_thread.join()
        strategy_done_event.set()
        websocket_thread.join()
    except KeyboardInterrupt:
        logging.debug("KeyboardInterrupt received. Shutting down.")
        strategy_done_event.set()
        strategy_thread.join()
        websocket_thread.join()
    finally:
        logging.debug("Main program finished")

