
from dhanhq import dhanhq

from Helper_Files.save_executed_order import save_executed_order
from Helper_Files.send_error_log import send_error_log






import logging
# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')



# Initialize DhanHQ client
client_id = "1101343871"
access_token = 'eyJ0eXAiHlwZSI6IlNFTEYiLCJ3ZWJob29rVXJsIjoiIiwiZGhhbkNsaWVudElkIjoiMTEwMTM0Mzg3MSJ9.Hm-KSGOhEhfveRUQ25U_hA9nQjrPDpV7UX6WJGaznYV7lRXaf-txSVPqxAqqLvMUJGliA6FfNAM0Fgdi7Dws3Q'




dhan = dhanhq(client_id, access_token)






def place_stop_loss_order(order_details, strategy_id,latest_ltp, strategy_data,actions):
    logging.debug(f"in place_stop_loss_orderr", order_details)
    
    # Place a limit order for book profit at +0.10%
    tick_size=0.01
    # Determine the opposite of transaction type
    transaction_type = dhan.SELL if order_details['data']['transactionType'] == dhan.BUY else dhan.BUY

   
    stoploss_percent = actions.get('stoploss_percent',1)  # Default to 0 if not provided
    MainOrderid = order_details['data']['orderId']
    logging.debug(f"MainOrderid in Risk_management.py: {MainOrderid}")
    logging.debug(f"order_details in Risk_management.py: {order_details}")
    send_error_log(order_details,"Risk_management.py-place_stop_loss_order")
    # Access price from the nested data dictionary
    # book_profit_price = order_details['data']['price'] * (1 + stop_loss_percentage / 100)
    # book_profit_price = round(book_profit_price / tick_size) * tick_size

    logging.debug(f"latest_ltp in place_stop_loss_order::{latest_ltp}")
    stop_loss_price = latest_ltp - (order_details['data']['price'] * stoploss_percent / 100)
    # stop_loss_price = round(stop_loss_price / tick_size) * tick_size
    # stop_loss_price = 23
    stop_loss_price = round(stop_loss_price / tick_size) * tick_size or 24.50

    logging.debug(f"stop_loss_price in Risk_management.py: {stop_loss_price}")
    send_error_log(f"stop_loss_price for strategy {strategy_id}: {stop_loss_price}","Risk_management.py")
   
    
    try:
        response = dhan.place_order(
            transaction_type=transaction_type,
            exchange_segment=order_details['data']['exchangeSegment'],
            product_type=order_details['data']['productType'],
            order_type=dhan.LIMIT,
            validity='DAY',
            security_id=order_details['data']['securityId'],
            quantity=order_details['data']['quantity'],
            price=stop_loss_price
        )
        logging.debug(f"stop_loss order placed successfully for strategy {strategy_id}. Response: {response}")
        
        if response['status'] == 'success' and 'data' in response:
            order_data = response['data']
            if order_data.get('orderStatus') == 'TRANSIT' and 'orderId' in order_data:
                order_id = order_data['orderId']
                order_details = dhan.get_order_by_id(order_id)
              
                save_executed_order(order_details, strategy_id, latest_ltp, MainOrderid=MainOrderid, stop_loss_price=stop_loss_price, ordertype="stop_loss")

    except Exception as e:
        logging.debug(f"Failed to place stop_loss order for strategy {strategy_id}: {e}")
        send_error_log("Failed to place stop_loss order for strategy {strategy_id}: {e}","Risk_management.py")

def place_book_profit_order(order_details, strategy_id,latest_ltp, strategy_data, actions):
    print("in place_book_profit_order", order_details)
    target_percent = actions.get('target_percent', 1)  # Default to 1 if not provided
    
    # Place a limit order for book profit at +0.10%
    tick_size=0.01
    
    MainOrderid = order_details['data']['orderId']
    logging.debug(f"order_details in Risk_management.py: {order_details}")
    send_error_log(order_details,"Risk_management.py-place_book_profit_order")
    # Access price from the nested data dictionary
    logging.debug(f"latest_ltp in place_book_profit_order::{latest_ltp}")
    book_profit_price = latest_ltp * (1 + target_percent / 100)
    # book_profit_price = round(book_profit_price / tick_size) * tick_size
    # book_profit_price = 27
    book_profit_price = round(book_profit_price / tick_size) * tick_size or 27

    logging.debug("in book_profit_price", book_profit_price)
    send_error_log(f"book_profit_price for strategy {strategy_id}: {book_profit_price}","Risk_management.py")
    try:
        response = dhan.place_order(
            transaction_type=dhan.SELL,
            exchange_segment=order_details['data']['exchangeSegment'],
            product_type=order_details['data']['productType'],
            order_type=dhan.LIMIT,
            validity='DAY',
            security_id=order_details['data']['securityId'],
            quantity=order_details['data']['quantity'],
            price=book_profit_price
        )
        logging.debug(f"Book profit order placed successfully for strategy {strategy_id}. Response: {response}")

        if response['status'] == 'success' and 'data' in response:
            order_data = response['data']
            if order_data.get('orderStatus') == 'TRANSIT' and 'orderId' in order_data:
                order_id = order_data['orderId']
                order_details = dhan.get_order_by_id(order_id)
                save_executed_order(order_details, strategy_id, latest_ltp, MainOrderid=MainOrderid, book_profit_price=book_profit_price, ordertype="Target")

    except Exception as e:
        logging.debug(f"Failed to place book profit order for strategy {strategy_id}: {e}")
        send_error_log("Failed to place book profit order for strategy {strategy_id}: {e}","Risk_management.py")

def cancel_pending_orders(order_id):
    try:
        response = dhan.cancel_order(order_id)
        if response['status'] == 'success':
            print(f"Cancelled pending order with order ID {order_id}")
        else:
            print(f"Failed to cancel pending order with order ID {order_id}")
    except Exception as e:
        print(f"Failed to cancel pending order with order ID {order_id}: {e}")


def check_pending_orders():
    try:
        pending_orders = dhan.get_order_list()
        print("pending_orders:",pending_orders)
        # Get pending orders
        # pending_orders = dhan.get_pending_orders()
        if pending_orders['status'] == 'success':
            orders = pending_orders['data']
            if orders:
                print("Pending orders found:")
                for order in orders:
                    print(f"Order ID: {order['orderId']}, Status: {order['orderStatus']}")
                    # Cancel pending orders after 3 p.m.
                    if order['orderTime'] >= '15:00':
                        cancel_pending_orders(order['orderId'])
            else:
                print("No pending orders found.")
        else:
            print("Failed to retrieve pending orders.")
    except Exception as e:
        print(f"Failed to check pending orders: {e}")


# Example usage:
# actions = [{'action_name': 'Buy', 'action_type': 'Bracket', 'BracketTarget': 10, 'BracketStopLoss': 7}]
# strategy_id = 123
# security_id = '500180'
# place_order(actions, strategy_id, security_id)
# check_pending_orders()
# order_details={'status': 'success', 'remarks': '', 'data': {'dhanClientId': '1101343871', 'orderId': '3124060429366', 'exchangeOrderId': '1200000029654842', 'correlationId': '1101343871-1717479224591', 'orderStatus': 'TRADED', 'transactionType': 'BUY', 'exchangeSegment': 'NSE_EQ', 'productType': 'INTRADAY', 'orderType': 'MARKET', 'validity': 'DAY', 'tradingSymbol': 'KRITI', 'securityId': '6417', 'quantity': 1, 'disclosedQuantity': 0, 'price': 107.9, 'triggerPrice': 0.0, 'afterMarketOrder': False, 'boProfitValue': 0.0, 'boStopLossValue': 0.0, 'legName': 'NA', 'createTime': '2024-06-04 11:03:44', 'updateTime': '2024-06-04 11:03:44', 'exchangeTime': '2024-06-04 11:03:44', 'drvExpiryDate': '0001-01-01', 'drvOptionType': 'NA', 'drvStrikePrice': 0.0, 'omsErrorCode': '0', 'omsErrorDescription': 'TRADE CONFIRMED', 'filled_qty': 1, 'algoId': '0'}}
# strategy_id = "S_89380"
# place_book_profit_order(order_details, strategy_id)
# place_stop_loss_order(order_details, strategy_id)
 



# # Sample order details object
# order_details = {
#     'status': 'success',
#     'remarks': '',
#     'data':   {  "dhanClientId": "1101343871",
#     "orderId": "4124081634466",
#     "exchangeOrderId": "1200000035156428",
#     "correlationId": "1101343871-1723791502282",
#     "orderStatus": "TRADED",
#     "transactionType": "BUY",
#     "exchangeSegment": "NSE_EQ",
#     "productType": "INTRADAY",
#     "orderType": "MARKET",
#     "validity": "DAY",
#     "tradingSymbol": "LASA",
#     "securityId": "21713",
#     "quantity": 1,
#     "disclosedQuantity": 0,
#     "price": 25.5,
#     "triggerPrice": 0.0,
#     "afterMarketOrder": "false",
#     "boProfitValue": 0.0,
#     "boStopLossValue": 0.0,
#     "legName": "NA",
#     "createTime": "2024-08-16 12:28:22",
#     "updateTime": "2024-08-16 12:28:22",
#     "exchangeTime": "2024-08-16 12:28:22",
#     "drvExpiryDate": "0001-01-01",
#     "drvOptionType": "NA",
#     "drvStrikePrice": 0.0,
#     "omsErrorCode": "0",
#     "omsErrorDescription": "TRADE CONFIRMED",
#     "filled_qty": 1,
#     "algoId": "0"
# }
# }

# # Sample strategy ID
# strategy_id = 'S_41868'

# strategy_data = {4}

# # Sample function call
# place_stop_loss_order(order_details, strategy_id, strategy_data,actions )