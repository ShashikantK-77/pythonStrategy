import logging

from datetime import datetime, timedelta
from Helper_Files.calculate_sma import calculate_sma
from Helper_Files.rsi import calculate_rsi
from Helper_Files.fetch_historical_data import fetch_historical_data
from Helper_Files.send_error_log import send_error_log

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Function to handle SMA indicator logic
def sma_indicator(strategy_data, symbol, fromDate, toDate, actions):
    try:
        # Extract SMA parameters
        parameters = {}
        for param in strategy_data.get('indicators', []):
            param_value = param['param_value']
            try:
                # Attempt to convert the value to an integer, otherwise leave it as a string
                param_value = int(param_value)
            except ValueError:
                # Non-numeric values will remain as they are
                pass
            parameters[param['param_name']] = param_value
        
        short_term_period = parameters.get('short_term_period')
        long_term_period = parameters.get('long_term_period')

        logging.debug(f"SMA ({parameters}). in Simple Moving Average.")
        
        # Fetch historical data
        hdata = fetch_historical_data(symbol, strategy_data['strategy']['exchange'], fromDate, toDate, period=None)

        # If both short-term and long-term periods are provided, calculate SMA
        if short_term_period and long_term_period:
            short_term_sma = calculate_sma(hdata, short_term_period)
            long_term_sma = calculate_sma(hdata, long_term_period)
            
            logging.debug(f"Short-term SMA: {short_term_sma}, Long-term SMA: {long_term_sma}")

            # Compare short-term and long-term SMA, and check for 'buy' action
            if short_term_sma > long_term_sma and any(action['action_name'] == 'buy' for action in actions):
                logging.debug("Short-term SMA is greater than Long-term SMA. 'buy' action found.")
                return True

        logging.debug("SMA conditions not met or no 'buy' action found.")
        return False
    except Exception as e:
        error_message = f"Error processing Simple Moving Average for symbol {symbol}: {str(e)}"
        send_error_log(error_message, 'strategy_engine')
        return False
    


# Compact RSI Indicator Function
# def rsi_indicator(indicator, strategy_data, symbol, actions, fromDate, toDate):
#     try:
#         # Extract RSI parameters
#         rsi_params = {}
#         for param in indicator.get('parameters', []):
#             param_value = param['param_value']
#             try:
#                 param_value = float(param_value)  # Convert to float only when applicable
#             except ValueError:
#                 pass
#             rsi_params[param['param_name']] = param_value

#         logging.debug(f"RSI Params: {rsi_params}")

#         # Set default values for overbought, oversold, and period
#         overbought = rsi_params.get('overbought', 70)
#         oversold = rsi_params.get('oversold', 30)
#         period = int(rsi_params.get('period', 14))

#         # Fetch historical data for RSI calculation
#         hdata = fetch_historical_data(symbol, strategy_data['strategy']['exchange'], fromDate, toDate, period)

#         logging.debug(f"Fetched historical data for RSI calculation.")

#         # Calculate RSI
#         rsi = calculate_rsi(hdata)
#         current_rsi = rsi.iloc[-1]
#         logging.debug(f"Current RSI: {current_rsi}")
#         logging.debug(f"Current RSI: {action['action_name']}")

#         # Check for overbought/oversold conditions and actions
#         if current_rsi > overbought and any(action['action_name'] == 'buy' for action in actions):
#             logging.debug(f"RSI is overbought ({current_rsi} > {overbought}) and 'sell' action found.")
#             return True
#         elif current_rsi < oversold and any(action['action_name'] == 'sell' for action in actions):
#             logging.debug(f"RSI is oversold ({current_rsi} < {oversold}) and 'buy' action found.")
#             return True
#         else:
#             logging.debug(f"RSI does not meet conditions or no matching action found.")
#             return False

#     except Exception as e:
#         error_message = f"Error processing RSI for symbol {symbol}: {str(e)}"
#         send_error_log(error_message, 'strategy_engine')
#         return False



# def rsi_indicator(indicator, strategy_data, symbol, actions, fromDate, toDate):
#     try:
#         # Extract RSI parameters
#         rsi_params = {}
#         for param in indicator.get('parameters', []):
#             param_value = param['param_value']
#             try:
#                 param_value = float(param_value)  # Convert to float only when applicable
#             except ValueError:
#                 pass
#             rsi_params[param['param_name']] = param_value

#         logging.debug(f"RSI Params: {rsi_params}")

#         # Set default values for overbought, oversold, and period
#         overbought = rsi_params.get('overbought', 70)
#         oversold = rsi_params.get('oversold', 30)
#         period = int(rsi_params.get('period', 14))

#         # Fetch historical data for RSI calculation
#         hdata = fetch_historical_data(symbol, strategy_data['strategy']['exchange'], fromDate, toDate, period)

#         logging.debug(f"Fetched historical data for RSI calculation.")

#         # Calculate RSI
#         rsi = calculate_rsi(hdata)
#         current_rsi = rsi.iloc[-1]
#         logging.debug(f"Current RSI: {current_rsi}")

#         # Check for overbought/oversold conditions and actions
#         logging.debug(f"Checking actions for symbol {symbol}: {actions}")

#         if current_rsi > overbought:
#             for action in actions:
#                 logging.debug(f"Checking action: {action['action_name']} (looking for 'buy')")
#                 if action['action_name'] == 'buy':
#                     logging.debug(f"RSI is overbought ({current_rsi} > {overbought}) and 'buy' action found.")
#                     return True

#         elif current_rsi < oversold:
#             for action in actions:
#                 logging.debug(f"Checking action: {action['action_name']} (looking for '')")
#                 if action['action_name'] == 'sell':
#                     logging.debug(f"RSI is oversold ({current_rsi} < {oversold}) and 'sell' action found.")
#                     return True

#         logging.debug(f"RSI does not meet conditions or no matching action found.")
#         return False

#     except Exception as e:
#         error_message = f"Error processing RSI for symbol {symbol}: {str(e)}"
#         send_error_log(error_message, 'strategy_engine')
#         return False


# def rsi_indicator(indicators, strategy_data, symbol, actions, fromDate, toDate):
#     try:
#         # Extract RSI parameters
#         rsi_params = {}
#         logging.debug(f"RSI indicator: {indicators}")
#         for param in indicator.get('indicators', []):
#             param_value = param['param_value']
#             try:
#                 param_value = float(param_value)  # Convert to float only when applicable
#             except ValueError:
#                 pass
#             rsi_params[param['param_name']] = param_value

#         logging.debug(f"RSI Params: {rsi_params}")

#         # Set default values for overbought, oversold, and period
#         overbought = rsi_params.get('overbought', 70)
#         oversold = rsi_params.get('oversold', 30)
#         period = int(rsi_params.get('period', 14))

#         # Log all three in one line
#         logging.debug(f"RSI Parameters - Overbought: {overbought}, Oversold: {oversold}, Period: {period}")

#         # Fetch historical data for RSI calculation
#         hdata = fetch_historical_data(symbol, strategy_data['strategy']['exchange'], fromDate, toDate, period)

#         # logging.debug(f"Fetched historical data for RSI calculation: {hdata}")

#         # Calculate RSI
#         rsi = calculate_rsi(hdata)
#         logging.debug(f"RSI Values: {rsi}")

#         current_rsi = rsi.iloc[-1]
#         logging.debug(f"Current RSI: {current_rsi}")

#         # Check for overbought/oversold conditions and actions
#         # logging.debug(f"Checking actions for symbol {symbol}: {actions}")

#         if current_rsi > overbought:
#             logging.debug(f"RSI is overbought: {current_rsi} > {overbought}")
#             for action in actions:
#                 logging.debug(f"Checking action: {action['action_name']} (looking for 'buy')")
#                 if action['action_name'] == 'buy':
#                     logging.debug(f"RSI is overbought ({current_rsi} > {overbought}) and 'buy' action found.")
#                     return True

#         elif current_rsi < oversold:
#             logging.debug(f"RSI is oversold: {current_rsi} < {oversold}")
#             for action in actions:
#                 logging.debug(f"Checking action: {action['action_name']} (looking for 'sell')")
#                 if action['action_name'] == 'sell':
#                     logging.debug(f"RSI is oversold ({current_rsi} < {oversold}) and 'sell' action found.")
#                     return True

#         logging.debug(f"RSI does not meet conditions or no matching action found.")
#         return False

#     except Exception as e:
#         error_message = f"Error processing RSI for symbol {symbol}: {str(e)}"
#         send_error_log(error_message, 'strategy_engine')
#         logging.debug(f"Exception occurred: {str(e)}")
#         return False


def rsi_indicator(indicators, strategy_data, symbol, actions, fromDate, toDate):
    try:
        # Extract RSI parameters
        rsi_params = {}
        # logging.debug(f"RSI indicator: {indicators}")
        for param in indicators:  # Change this line to iterate over indicators directly
            param_value = param['param_value']
            try:
                param_value = float(param_value)  # Convert to float only when applicable
            except ValueError:
                pass
            rsi_params[param['param_name']] = param_value

        logging.debug(f"RSI Params: {rsi_params}")

        # Set default values for overbought, oversold, and period from indicators
        overbought = float(next((param['param_value'] for param in indicators if param['param_name'] == 'overbought'), 70))
        oversold = float(next((param['param_value'] for param in indicators if param['param_name'] == 'oversold'), 30))
        period = int(next((param['param_value'] for param in indicators if param['param_name'] == 'period'), 14))

        # Log all three in one line
        logging.debug(f"RSI Parameters - Overbought: {overbought}, Oversold: {oversold}, Period: {period}")

        # Fetch historical data for RSI calculation
        hdata = fetch_historical_data(symbol, strategy_data['strategy']['exchange'], fromDate, toDate, period)

        # Calculate RSI
        rsi = calculate_rsi(hdata)
        # logging.debug(f"RSI Values: {rsi}")

        current_rsi = rsi.iloc[-1]
        logging.debug(f"Current RSI: {current_rsi}")

        # Check for overbought/oversold conditions and actions
        if current_rsi > overbought:
            logging.debug(f"RSI is overbought: {current_rsi} > {overbought}")
            for action in actions:
                logging.debug(f"Checking action: {action['action_name']} (looking for 'buy')")
                if action['action_name'] == 'buy':
                    logging.debug(f"RSI is overbought ({current_rsi} > {overbought}) and 'buy' action found.")
                    return True

        elif current_rsi < oversold:
            logging.debug(f"RSI is oversold: {current_rsi} < {oversold}")
            for action in actions:
                logging.debug(f"Checking action: {action['action_name']} (looking for 'sell')")
                if action['action_name'] == 'sell':
                    logging.debug(f"RSI is oversold ({current_rsi} < {oversold}) and 'sell' action found.")
                    return True

        logging.debug(f"RSI does not meet conditions or no matching action found.")
        return False

    except Exception as e:
        error_message = f"Error processing RSI for symbol {symbol}: {str(e)}"
        send_error_log(error_message, 'strategy_engine')
        logging.debug(f"Exception occurred: {str(e)}")
        return False
